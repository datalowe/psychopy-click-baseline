<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.5">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="macMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1280, 800]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="click_baseline" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="debug" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code_trial">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="class Point:&amp;#10;    &quot;&quot;&quot;&amp;#10;    Represents (x, y) coordinates in 2-dimensional space.&amp;#10;    &quot;&quot;&quot;&amp;#10;    def __init__(self, x, y):&amp;#10;        self.x = x&amp;#10;        self.y = y&amp;#10;    &amp;#10;    def __sub__(self, other):&amp;#10;        &quot;&quot;&quot;&amp;#10;        Returns the euclidean distance between this and the&amp;#10;        other passed point.&amp;#10;        &quot;&quot;&quot;&amp;#10;        dist = ((self.x - other.x)**2 + (self.y - other.y)**2)**(1/2)&amp;#10;        return dist&amp;#10;    &amp;#10;    def __str__(self):&amp;#10;        &quot;&quot;&quot;&amp;#10;        Returns string representation '(x, y)' of this point.&amp;#10;        &quot;&quot;&quot;&amp;#10;        return &quot;({}, {})&quot;.format(self.x, self.y)&amp;#10;    &amp;#10;    def __repr__(self):&amp;#10;        &quot;&quot;&quot;&amp;#10;        Returns description of how this point can be&amp;#10;        recreated.&amp;#10;        &quot;&quot;&quot;&amp;#10;        return &quot;Point({}, {})&quot;.format(self.x, self.y)&amp;#10;    &amp;#10;    def as_tuple(self):&amp;#10;        &quot;&quot;&quot;&amp;#10;        Returns a (x, y) tuple with this point's x/y coordinates.&amp;#10;        &quot;&quot;&quot;&amp;#10;        return self.x, self.y&amp;#10;&amp;#10;def points_collide(point_ls, new_point):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Goes through a list of Point instances and compares&amp;#10;    the new_point to see if the new_point is too close&amp;#10;    to one of the points in the point_ls. Returns True if&amp;#10;    there is a collision, otherwise False.&amp;#10;    &quot;&quot;&quot;&amp;#10;    collides = False&amp;#10;    for old_point in point_ls:&amp;#10;        if (new_point - old_point) &lt; TARGET_SIZE_DEG:&amp;#10;            collides = True&amp;#10;            break&amp;#10;    return collides&amp;#10;&amp;#10;def gen_rand_point():&amp;#10;    &quot;&quot;&quot;&amp;#10;    Generates a random point within the target area.&amp;#10;    &quot;&quot;&quot;&amp;#10;    x_coord = randint(-AREA_WIDTH_DEG//2, AREA_WIDTH_DEG//2)&amp;#10;    y_coord = randint(-AREA_HEIGHT_DEG//2, AREA_HEIGHT_DEG//2)&amp;#10;    return Point(x_coord, y_coord)&amp;#10;&amp;#10;def gen_point_ls():&amp;#10;    &quot;&quot;&quot;&amp;#10;    Generate a list of (x, y) coordinate Point instances until&amp;#10;    there are as many instances as there should be targets/trial.&amp;#10;    &quot;&quot;&quot;&amp;#10;    point_ls = []&amp;#10;    while len(point_ls) &lt; NUM_TARGETS:&amp;#10;        new_point = gen_rand_point()&amp;#10;        if not points_collide(point_ls, new_point):&amp;#10;            point_ls.append(new_point)&amp;#10;    return point_ls&amp;#10;&amp;#10;def gen_trial_ls():&amp;#10;    &quot;&quot;&quot;&amp;#10;    Generates a list of lists, where each inner list corresponds to&amp;#10;    points describing the placements of all targets in a trial.&amp;#10;    &quot;&quot;&quot;&amp;#10;    trial_ls = []&amp;#10;    while len(trial_ls) &lt; NUM_TRIALS:&amp;#10;        point_ls = gen_point_ls()&amp;#10;        trial_ls.append(point_ls)&amp;#10;    return trial_ls&amp;#10;&amp;#10;trial_ls = gen_trial_ls()&amp;#10;&amp;#10;# generate one TextStim instance for each target&amp;#10;# (numbering starting from 1)&amp;#10;targets = []&amp;#10;for i in range(1, NUM_TARGETS+1):&amp;#10;    new_target = visual.TextStim(&amp;#10;        win=win, &amp;#10;        name='text_target_{}'.format(i),&amp;#10;        text='{}'.format(i),&amp;#10;        font='Arial',&amp;#10;        units='deg', &amp;#10;        pos=(0, 0), &amp;#10;        height=TARGET_SIZE_DEG, &amp;#10;        wrapWidth=None, ori=0, &amp;#10;        color=TARGET_NEUTRAL_COL, &amp;#10;        colorSpace='rgb', &amp;#10;        opacity=1, &amp;#10;        languageStyle='LTR',&amp;#10;        depth=-1.0)&amp;#10;    targets.append(new_target)&amp;#10;&amp;#10;# initialize trial counter&amp;#10;trial_counter = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# fetch the list of Point instances representing the&amp;#10;# (x, y) coordinates that are to be used for targets&amp;#10;# during this trial&amp;#10;point_ls = trial_ls[trial_counter]&amp;#10;&amp;#10;# assign positions to the targets and reset their&amp;#10;# colors to white&amp;#10;for i, target in enumerate(targets):&amp;#10;    target.pos = point_ls[i].as_tuple()&amp;#10;    target.color = TARGET_NEUTRAL_COL&amp;#10;&amp;#10;# make a shallow copy of the targets list that keeps&amp;#10;# track of which targets haven't been clicked on yet&amp;#10;nonclicked_targets = targets[:]&amp;#10;&amp;#10;# set first target to be clicked&amp;#10;click_target = nonclicked_targets.pop(0)&amp;#10;&amp;#10;# reset list of times when clicks occur&amp;#10;response_times = []&amp;#10;&amp;#10;# fetch the routine start time&amp;#10;trial_start_time = globalClock.getTime()&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# draw all of the targets&amp;#10;for target in targets:&amp;#10;    target.draw()&amp;#10;&amp;#10;# check if mouse button has been clicked, and if so,&amp;#10;# if any of the targets were clicked&amp;#10;buttons = mouse_trial.getPressed()&amp;#10;if buttons != prevButtonState:  # button state changed?&amp;#10;    prevButtonState = buttons&amp;#10;    if sum(buttons) &gt; 0:  # state changed to a new click&amp;#10;        # check if the mouse was inside of target&amp;#10;        if click_target.contains(mouse_trial):&amp;#10;            # change color of target to indicate it's been clicked&amp;#10;            click_target.color = TARGET_CLICKED_COL&amp;#10;            # save the click time&amp;#10;            response_times.append(trialClock.getTime())&amp;#10;            # if there are targets left to click, make the next target in line clickable&amp;#10;            # otherwise, end the routine&amp;#10;            if len(nonclicked_targets) &gt; 0:&amp;#10;                click_target = nonclicked_targets.pop(0)&amp;#10;            else:&amp;#10;                continueRoutine = False&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="for (var target, _pj_c = 0, _pj_a = targets, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    target = _pj_a[_pj_c];&amp;#10;    target.draw();&amp;#10;}&amp;#10;buttons = mouse_trial.getPressed();&amp;#10;if ((buttons !== prevButtonState)) {&amp;#10;    prevButtonState = buttons;&amp;#10;    if ((sum(buttons) &gt; 0)) {&amp;#10;        if (click_target.contains(mouse_trial)) {&amp;#10;            click_target.color = TARGET_CLICKED_COL;&amp;#10;            response_times.append(trialClock.getTime());&amp;#10;            if ((nonclicked_targets.length &gt; 0)) {&amp;#10;                click_target = nonclicked_targets.pop(0);&amp;#10;            } else {&amp;#10;                continueRoutine = false;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="trials.addData(&quot;response_times&quot;, response_times);&amp;#10;trials.addData(&quot;trial_start_time&quot;, trial_start_time);&amp;#10;trial_counter += 1;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# save trial data&amp;#10;trials.addData('response_times', response_times)&amp;#10;trials.addData('trial_start_time', trial_start_time)&amp;#10;&amp;#10;# increment trial counter&amp;#10;trial_counter += 1&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_trial" valType="code"/>
      </CodeComponent>
      <MouseComponent name="mouse_trial">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="mouse_trial" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
    </Routine>
    <Routine name="instructions">
      <TextComponent name="text_instructions">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="TXT_SIZE_M" valType="code"/>
        <Param name="name" updates="None" val="text_instructions" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Din uppgift i det här testet är att så snabbt du kan klicka med musen på siffror som kommer upp på skärmen nummordning. Klicka först på 1, sen 2, sen fortsätt så upp till den högsta siffran.&amp;#10;&amp;#10;Använd vänster musknapp.&amp;#10;&amp;#10;Testet tar ca 3 minuter att genomföra." valType="extendedStr"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="25" valType="code"/>
      </TextComponent>
      <MouseComponent name="mouse_instructions">
        <Param name="clickable" updates="constant" val="text_go" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="mouse_instructions" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <TextComponent name="text_go">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="TXT_SIZE_S" valType="code"/>
        <Param name="name" updates="None" val="text_go" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -6)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Klicka här när du läst klart för att börja testet" valType="extendedStr"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="25" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_constants">
        <Param name="Before Experiment" updates="constant" val="### SET EXPERIMENT CONSTANTS ###&amp;#10;# width/height of area where targets&amp;#10;# can appear, in degrees&amp;#10;AREA_WIDTH_DEG = 14&amp;#10;AREA_HEIGHT_DEG = 14&amp;#10;&amp;#10;# target text (digit) size, in degrees&amp;#10;TARGET_SIZE_DEG = 1.5&amp;#10;# target text neutral (non-clicked) color&amp;#10;TARGET_NEUTRAL_COL = &quot;#FFFFFF&quot;&amp;#10;# target text clicked color&amp;#10;TARGET_CLICKED_COL = &quot;#BBFFBB&quot;&amp;#10;&amp;#10;# large/medium/small instructions text size,&amp;#10;# in degrees&amp;#10;TXT_SIZE_L = 2&amp;#10;TXT_SIZE_M = 0.8&amp;#10;TXT_SIZE_S = 0.6&amp;#10;&amp;#10;# number of trials to run&amp;#10;NUM_TRIALS = 3&amp;#10;&amp;#10;# number of targets (digits/numbers) to use, ie how many&amp;#10;# targets to show per trial. target numbering always&amp;#10;# starts from 1.&amp;#10;NUM_TARGETS = 9&amp;#10;&amp;#10;### END SET EXPERIMENT CONSTANTS ###" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="AREA_WIDTH_DEG = 14;&amp;#10;AREA_HEIGHT_DEG = 14;&amp;#10;TARGET_SIZE_DEG = 1.5;&amp;#10;TARGET_NEUTRAL_COL = &quot;#FFFFFF&quot;;&amp;#10;TARGET_CLICKED_COL = &quot;#BBFFBB&quot;;&amp;#10;TXT_SIZE_L = 2;&amp;#10;TXT_SIZE_M = 0.8;&amp;#10;TXT_SIZE_S = 0.6;&amp;#10;NUM_TRIALS = 3;&amp;#10;NUM_TARGETS = 9;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_constants" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="end_routine">
      <TextComponent name="text_end">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="TXT_SIZE_L" valType="code"/>
        <Param name="name" updates="None" val="text_end" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Nu är du klar. Tack!" valType="extendedStr"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="25" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="NUM_TRIALS" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <Routine name="end_routine"/>
  </Flow>
</PsychoPy2experiment>
